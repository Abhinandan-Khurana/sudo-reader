diff --git a/node_modules/@parcel/transformer-webextension/lib/WebExtensionTransformer.js b/node_modules/@parcel/transformer-webextension/lib/WebExtensionTransformer.js
index 53cf1e0..2edb090 100644
--- a/node_modules/@parcel/transformer-webextension/lib/WebExtensionTransformer.js
+++ b/node_modules/@parcel/transformer-webextension/lib/WebExtensionTransformer.js
@@ -193,17 +193,31 @@ async function collectDependencies(asset, program, ptrs, hot) {
 
   if (program.web_accessible_resources) {
     let war = [];
+    let i = 0;
+    for (const resource of program.web_accessible_resources) {
+      const reses = typeof resource === 'string' ? [resource] : resource.resources;
+      let j = 0;
+      for (const res of reses) {
+        // TODO: this doesn't support Parcel resolution
+        const globFiles = (await (0, _utils().glob)(_path().default.join(_path().default.dirname(filePath), res), fs, {})).map(fp => asset.addURLDependency(_path().default.relative(_path().default.dirname(filePath), fp), {
+          needsStableName: true,
+          loc: {
+            filePath,
+            ...(0, _diagnostic().getJSONSourceLocation)(ptrs[`/web_accessible_resources/${i}/resources/${j}`])
+          }
+        }));
 
-    for (let i = 0; i < program.web_accessible_resources.length; ++i) {
-      // TODO: this doesn't support Parcel resolution
-      const globFiles = (await (0, _utils().glob)(_path().default.join(_path().default.dirname(filePath), program.web_accessible_resources[i]), fs, {})).map(fp => asset.addURLDependency(_path().default.relative(_path().default.dirname(filePath), fp), {
-        needsStableName: true,
-        loc: {
-          filePath,
-          ...(0, _diagnostic().getJSONSourceLocation)(ptrs[`/web_accessible_resources/${i}`])
+        if (typeof resource === 'string') {
+          war = war.concat(globFiles);
+        } else {
+          war.push({
+            ...resource,
+            resources: globFiles
+          });
         }
-      }));
-      war = war.concat(globFiles);
+        j += 1;
+      }
+      i += 1;
     }
 
     program.web_accessible_resources = war;
diff --git a/node_modules/@parcel/transformer-webextension/lib/schema.js b/node_modules/@parcel/transformer-webextension/lib/schema.js
index 56b3c0e..bc3f1ca 100644
--- a/node_modules/@parcel/transformer-webextension/lib/schema.js
+++ b/node_modules/@parcel/transformer-webextension/lib/schema.js
@@ -50,7 +50,7 @@ var _default = {
   properties: {
     manifest_version: {
       type: 'number',
-      enum: [2]
+      enum: [2, 3]
     },
     name: {
       type: 'string'
@@ -115,6 +115,7 @@ var _default = {
         page: {
           type: 'string'
         },
+        service_worker: {type: 'string'},
         persistent: {
           type: 'boolean'
         }
@@ -602,7 +603,18 @@ var _default = {
     version_name: {
       type: 'string'
     },
-    web_accessible_resources: arrStr
+    web_accessible_resources: {
+      oneOf: [arrStr, {
+        type: 'array',
+        items: {
+          type: 'object',
+          properties: {
+            resources: arrStr,
+            matches: arrStr,
+          },
+        },
+      }],
+    },
   }
 };
 exports.default = _default;
\ No newline at end of file
diff --git a/node_modules/@parcel/transformer-webextension/src/WebExtensionTransformer.js b/node_modules/@parcel/transformer-webextension/src/WebExtensionTransformer.js
index c409b21..fc10a13 100644
--- a/node_modules/@parcel/transformer-webextension/src/WebExtensionTransformer.js
+++ b/node_modules/@parcel/transformer-webextension/src/WebExtensionTransformer.js
@@ -20,6 +20,7 @@ const DEP_LOCS = [
   ['page_action', 'default_icon'],
   ['page_action', 'default_popup'],
   ['background', 'scripts'],
+  ['background', 'service_worker'],
   ['chrome_url_overrides'],
   ['devtools_page'],
   ['options_ui', 'page'],
@@ -172,30 +173,45 @@ async function collectDependencies(
   }
   if (program.web_accessible_resources) {
     let war = [];
-    for (let i = 0; i < program.web_accessible_resources.length; ++i) {
-      // TODO: this doesn't support Parcel resolution
-      const globFiles = (
-        await glob(
-          path.join(
-            path.dirname(filePath),
-            program.web_accessible_resources[i],
-          ),
-          fs,
-          {},
-        )
-      ).map(fp =>
-        asset.addURLDependency(path.relative(path.dirname(filePath), fp), {
-          needsStableName: true,
-          loc: {
-            filePath,
-            ...getJSONSourceLocation(ptrs[`/web_accessible_resources/${i}`]),
-          },
-        }),
-      );
-      war = war.concat(globFiles);
+    let i = 0;
+    for (const resource of program.web_accessible_resources) {
+      const reses = typeof resource === 'string' ? [resource] : resource.resources;
+      for (const res of reses) {
+        // TODO: this doesn't support Parcel resolution
+        const globFiles = (
+          await glob(
+            path.join(
+              path.dirname(filePath),
+              res,
+            ),
+            fs,
+            {},
+          )
+        ).map(fp =>
+          asset.addURLDependency(path.relative(path.dirname(filePath), fp), {
+            needsStableName: true,
+            loc: {
+              filePath,
+              ...getJSONSourceLocation(ptrs[`/web_accessible_resources/${i}`]),
+            },
+          }),
+        );
+        war = war.concat(globFiles);
+
+        if (typeof resource === 'string') {
+          war = war.concat(globFiles);
+        } else {
+          war.push({
+            ...resource,
+            resources: globFiles
+          });
+        }
+        i += 1;
+      }
     }
     program.web_accessible_resources = war;
   }
+  
   for (const loc of DEP_LOCS) {
     const location = '/' + loc.join('/');
     if (!ptrs[location]) continue;
diff --git a/node_modules/@parcel/transformer-webextension/src/schema.js b/node_modules/@parcel/transformer-webextension/src/schema.js
index 4d829ba..08c0b9e 100644
--- a/node_modules/@parcel/transformer-webextension/src/schema.js
+++ b/node_modules/@parcel/transformer-webextension/src/schema.js
@@ -43,7 +43,7 @@ export default ({
   properties: {
     manifest_version: {
       type: 'number',
-      enum: [2],
+      enum: [2, 3],
     },
     name: {type: 'string'},
     version: {
@@ -92,6 +92,7 @@ export default ({
       properties: {
         scripts: arrStr,
         page: {type: 'string'},
+        service_worker: {type: 'string'},
         persistent: {type: 'boolean'},
       },
     },
@@ -387,6 +388,17 @@ export default ({
       },
     },
     version_name: {type: 'string'},
-    web_accessible_resources: arrStr,
+    web_accessible_resources: {
+      oneOf: [arrStr, {
+        type: 'array',
+        items: {
+          type: 'object',
+          properties: {
+            resources: arrStr,
+            matches: arrStr,
+          },
+        },
+      }],
+    },
   },
 }: SchemaEntity);
